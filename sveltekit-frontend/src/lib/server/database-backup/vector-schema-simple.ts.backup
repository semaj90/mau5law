// Simplified Vector Schema - Production Ready
import { jsonb, pgTable, real, text, timestamp, uuid, varchar } from "drizzle-orm/pg-core";

// Chat embeddings table for AI conversations
export const chatEmbeddings = pgTable("chat_embeddings", {
    id: uuid("id").primaryKey().defaultRandom().defaultRandom().defaultRandom().defaultRandom().defaultRandom().defaultRandom(),
    conversationId: uuid("conversation_id").notNull(),
    role: varchar("role", { length: 20 }).notNull(),
    content: text("content").notNull(),
    embedding: jsonb("embedding").notNull(),
    metadata: jsonb("metadata"),
    createdAt: timestamp("created_at").defaultNow(),
    updatedAt: timestamp("updated_at").defaultNow(),
});

// Evidence embeddings table
export const evidenceVectors = pgTable("evidence_vectors", {
    id: uuid("id").primaryKey().defaultRandom().defaultRandom().defaultRandom().defaultRandom().defaultRandom().defaultRandom(),
    evidenceId: uuid("evidence_id").notNull(),
    content: text("content").notNull(),
    embedding: jsonb("embedding").notNull(),
    metadata: jsonb("metadata"),
    createdAt: timestamp("created_at").defaultNow(),
    updatedAt: timestamp("updated_at").defaultNow(),
});

// Case embeddings table
export const caseEmbeddings = pgTable("case_embeddings", {
    id: uuid("id").primaryKey().defaultRandom().defaultRandom().defaultRandom().defaultRandom().defaultRandom().defaultRandom(),
    caseId: uuid("case_id").notNull(),
    fieldName: varchar("field_name", { length: 100 }).notNull(),
    content: text("content").notNull(),
    embedding: jsonb("embedding").notNull(),
    metadata: jsonb("metadata"),
    createdAt: timestamp("created_at").defaultNow(),
    updatedAt: timestamp("updated_at").defaultNow(),
});

// User embeddings table
export const userEmbeddings = pgTable("user_embeddings", {
    id: uuid("id").primaryKey().defaultRandom().defaultRandom().defaultRandom().defaultRandom().defaultRandom().defaultRandom(),
    userId: uuid("user_id").notNull(),
    contentType: varchar("content_type", { length: 50 }).notNull(),
    content: text("content").notNull(),
    embedding: jsonb("embedding").notNull(),
    metadata: jsonb("metadata"),
    createdAt: timestamp("created_at").defaultNow(),
    updatedAt: timestamp("updated_at").defaultNow(),
});

// Document embeddings table
export const documentEmbeddings = pgTable("document_embeddings", {
    id: uuid("id").primaryKey().defaultRandom().defaultRandom().defaultRandom().defaultRandom().defaultRandom().defaultRandom(),
    documentId: uuid("document_id").notNull(),
    documentType: varchar("document_type", { length: 50 }).notNull(),
    chunkText: text("chunk_text").notNull(),
    embedding: jsonb("embedding").notNull(),
    metadata: jsonb("metadata"),
    createdAt: timestamp("created_at").defaultNow(),
    updatedAt: timestamp("updated_at").defaultNow(),
});

// Vector similarity table
export const vectorSimilarity = pgTable("vector_similarity", {
    id: uuid("id").primaryKey().defaultRandom().defaultRandom().defaultRandom().defaultRandom().defaultRandom().defaultRandom(),
    sourceId: uuid("source_id").notNull(),
    targetId: uuid("target_id").notNull(),
    sourceType: varchar("source_type", { length: 50 }).notNull(),
    targetType: varchar("target_type", { length: 50 }).notNull(),
    similarity: real("similarity").notNull(),
    metadata: jsonb("metadata"),
    createdAt: timestamp("created_at").defaultNow(),
});

// Semantic search cache
export const semanticSearchCache = pgTable("semantic_search_cache", {
    id: uuid("id").primaryKey().defaultRandom().defaultRandom().defaultRandom().defaultRandom().defaultRandom().defaultRandom(),
    queryHash: varchar("query_hash", { length: 64 }).notNull(),
    query: text("query").notNull(),
    results: jsonb("results").notNull(),
    embedding: jsonb("embedding").notNull(),
    metadata: jsonb("metadata"),
    createdAt: timestamp("created_at").defaultNow(),
    expiresAt: timestamp("expires_at"),
});

// Export types for use in services
export type ChatEmbedding = typeof chatEmbeddings.$inferSelect;
export type NewChatEmbedding = typeof chatEmbeddings.$inferInsert;

export type EvidenceVector = typeof evidenceVectors.$inferSelect;
export type NewEvidenceVector = typeof evidenceVectors.$inferInsert;

export type CaseEmbedding = typeof caseEmbeddings.$inferSelect;
export type NewCaseEmbedding = typeof caseEmbeddings.$inferInsert;

export type UserEmbedding = typeof userEmbeddings.$inferSelect;
export type NewUserEmbedding = typeof userEmbeddings.$inferInsert;

export type DocumentEmbedding = typeof documentEmbeddings.$inferSelect;
export type NewDocumentEmbedding = typeof documentEmbeddings.$inferInsert;

export type VectorSimilarity = typeof vectorSimilarity.$inferSelect;
export type NewVectorSimilarity = typeof vectorSimilarity.$inferInsert;

export type SemanticSearchCache = typeof semanticSearchCache.$inferSelect;
export type NewSemanticSearchCache = typeof semanticSearchCache.$inferInsert;

// Embedding type helpers
export interface EmbeddingOptions {
    caseId?: string;
    userId?: string;
    metadata?: Record<string, any>;
}
export interface VectorSearchResult {
    id: string;
    content: string;
    similarity: number;
    metadata?: Record<string, any>;
}
// Aliases for backward compatibility
export const searchQueries = semanticSearchCache;
export const userEmbeddings_simple = userEmbeddings;
export const caseEmbeddings_simple = caseEmbeddings;
export const evidenceEmbeddings_simple = evidenceVectors;
export const documentEmbeddings_simple = documentEmbeddings;
export const vectorSimilarity_simple = vectorSimilarity;
export const semanticSearchCache_simple = semanticSearchCache;