═══════════════════════════════════════════════════════════════════════════════
                    RABBITMQ INTEGRATION GUIDE
             Legal AI Platform - Unified Orchestration System
═══════════════════════════════════════════════════════════════════════════════

🚀 OVERVIEW
═══════════════════════════════════════════════════════════════════════════════

This guide documents the complete RabbitMQ integration system built for the 
Legal AI platform, featuring:

✅ Optimized job orchestration with 15 specialized processors
✅ Auto-attach self-optimizing queue management with ML
✅ Asynchronous state management with XState integration  
✅ Unified legal orchestration service
✅ Evidence canvas integration with real-time processing

🏗️ SYSTEM ARCHITECTURE
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│                        SvelteKit Legal AI App                              │
├─────────────────────────────────────────────────────────────────────────────┤
│  Evidence Canvas UI                                                         │
│  ├── File Upload & Analysis                                                │
│  ├── Detective Analysis Integration                                        │
│  ├── Unified Processing Button (🚀 UNIFIED AI)                            │
│  └── Real-time Job Monitoring                                              │
├─────────────────────────────────────────────────────────────────────────────┤
│  Unified Legal Orchestration Service                                       │
│  ├── Document Processing Pipeline                                          │
│  ├── Evidence Canvas Processing                                            │
│  ├── Batch Document Processing                                             │
│  └── System Health Monitoring                                              │
├─────────────────────────────────────────────────────────────────────────────┤
│  Core RabbitMQ Services                                                    │
│  ├── OptimizedRabbitMQOrchestrator                                        │
│  │   ├── 15 Specialized Job Processors                                    │
│  │   ├── Priority Queue Management                                        │
│  │   ├── Auto-scaling & Performance Prediction                           │
│  │   └── Resource Optimization                                            │
│  ├── AutoAttachQueueManager                                               │
│  │   ├── Machine Learning Queue Optimization                             │
│  │   ├── Dynamic Queue Attachment                                         │
│  │   ├── XState Lifecycle Management                                      │
│  │   └── Performance Metrics Collection                                   │
│  └── AsyncRabbitMQStateManager                                            │
│      ├── Distributed State Management                                      │
│      ├── Conflict Resolution & Distributed Locking                        │
│      ├── Svelte Store Integration                                          │
│      └── Real-time Synchronization                                         │
├─────────────────────────────────────────────────────────────────────────────┤
│  RabbitMQ Infrastructure                                                   │
│  ├── Message Broker (localhost:5672)                                       │
│  ├── Management UI (localhost:15672)                                       │
│  ├── Queues: legal.*, document.*, vector.*, evidence.*                    │
│  ├── Exchanges: legal.main, legal.dlx                                     │
│  └── Dead Letter Queue (legal.dlq)                                         │
├─────────────────────────────────────────────────────────────────────────────┤
│  Database Integration                                                       │
│  ├── PostgreSQL (CRUD Operations)                                          │
│  ├── pgvector (Embeddings Storage)                                        │
│  ├── Qdrant (Vector Database)                                             │
│  └── Neo4j (Graph Relationships)                                          │
└─────────────────────────────────────────────────────────────────────────────┘

📁 FILE STRUCTURE
═══════════════════════════════════════════════════════════════════════════════

sveltekit-frontend/
├── src/lib/
│   ├── orchestration/
│   │   └── optimized-rabbitmq-orchestrator.ts     # Job orchestration
│   ├── services/
│   │   ├── auto-attach-queue-manager.ts            # Queue management
│   │   └── unified-legal-orchestration-service.ts # Unified interface
│   ├── state/
│   │   └── async-rabbitmq-state-manager.ts         # State management
│   ├── workers/
│   │   └── rabbitmq-service-worker.ts              # Background worker
│   └── ui/enhanced/
│       └── EvidenceCanvas.svelte                   # UI integration
├── src/routes/api/
│   ├── legal/
│   │   ├── process/+server.ts                      # Document processing
│   │   ├── evidence-canvas/+server.ts              # Evidence processing
│   │   ├── batch/+server.ts                        # Batch processing
│   │   ├── status/[jobId]/+server.ts              # Job status
│   │   └── health/+server.ts                       # System health
│   ├── rabbitmq/
│   │   └── health/+server.ts                       # RabbitMQ health
│   └── workers/
│       └── rabbitmq/+server.ts                     # Worker management
└── scripts/
    └── start-unified-services.js                   # Service startup

🔧 CORE COMPONENTS
═══════════════════════════════════════════════════════════════════════════════

1. OPTIMIZED RABBITMQ ORCHESTRATOR
───────────────────────────────────────────────────────────────────────────────
File: src/lib/orchestration/optimized-rabbitmq-orchestrator.ts

Features:
✅ 15 Specialized Job Processors:
   - document-analysis, legal-classification, entity-extraction
   - contract-analysis, evidence-analysis, relationship-mapping  
   - pattern-detection, forensic-timeline, risk-assessment
   - compliance-check, sentiment-analysis, cuda-acceleration
   - vector-embedding, search-indexing, notification-dispatch

✅ Auto-scaling & Performance Prediction
✅ Priority Queue Management (1-5 priority levels)
✅ Resource Optimization & Load Balancing
✅ Comprehensive Error Handling & Retry Logic

Usage:
```typescript
const orchestrator = OptimizedRabbitMQOrchestrator.getInstance();
await orchestrator.initialize();

const jobId = await orchestrator.submitJob({
  type: 'document-analysis',
  payload: { content: 'legal document text' },
  priority: 2
});
```

2. AUTO-ATTACH QUEUE MANAGER
───────────────────────────────────────────────────────────────────────────────
File: src/lib/services/auto-attach-queue-manager.ts

Features:
✅ Machine Learning Queue Optimization
✅ Dynamic Queue Attachment Based on Workload
✅ XState Machine for Queue Lifecycle Management
✅ Performance Metrics & Optimization Scoring
✅ Auto-scaling with Configurable Thresholds

Usage:
```typescript
const queueManager = AutoAttachQueueManager.getInstance();
await queueManager.initialize();

await queueManager.attachQueue('legal.documents', ['document-analysis']);
const attachments = queueManager.getAttachments();
```

3. ASYNC RABBITMQ STATE MANAGER
───────────────────────────────────────────────────────────────────────────────
File: src/lib/state/async-rabbitmq-state-manager.ts

Features:
✅ Distributed State Management
✅ Conflict Resolution & Distributed Locking
✅ Svelte Store Integration for Reactive UI
✅ Real-time State Synchronization
✅ Event-driven Architecture with Subscriptions

Usage:
```typescript
const stateManager = AsyncRabbitMQStateManager.getInstance();
await stateManager.initialize();

stateManager.updateJobState(jobId, { status: 'processing', progress: 50 });
const statusStore = stateManager.createJobStatusStore(jobId);
```

4. UNIFIED LEGAL ORCHESTRATION SERVICE
───────────────────────────────────────────────────────────────────────────────
File: src/lib/services/unified-legal-orchestration-service.ts

Features:
✅ Single Interface for All Legal AI Operations
✅ Document Processing Pipeline
✅ Evidence Canvas Integration
✅ Batch Processing Support
✅ Comprehensive System Health Monitoring

Usage:
```typescript
import { unifiedLegalOrchestrationService } from '$lib/services/unified-legal-orchestration-service.js';

const result = await unifiedLegalOrchestrationService.processLegalDocument({
  content: 'legal document text',
  processingPipeline: ['document-analysis', 'entity-extraction'],
  priority: 2
});
```

🌐 API ENDPOINTS
═══════════════════════════════════════════════════════════════════════════════

1. LEGAL DOCUMENT PROCESSING
POST /api/legal/process
```json
{
  "content": "Legal document text",
  "processingPipeline": ["document-analysis", "entity-extraction"],
  "priority": 2,
  "metadata": {},
  "analysisType": "legal"
}
```

2. EVIDENCE CANVAS PROCESSING  
POST /api/legal/evidence-canvas
```json
{
  "canvasId": "canvas_123",
  "evidenceItems": [...],
  "analysisType": "detective"
}
```

3. BATCH PROCESSING
POST /api/legal/batch
```json
{
  "documents": [
    {"id": "doc1", "content": "text1"},
    {"id": "doc2", "content": "text2"}
  ]
}
```

4. JOB STATUS MONITORING
GET /api/legal/status/{jobId}
```json
{
  "success": true,
  "jobId": "job_123",
  "status": {
    "status": "processing",
    "progress": 75,
    "type": "document-analysis"
  }
}
```

5. SYSTEM HEALTH
GET /api/legal/health
```json
{
  "status": "healthy",
  "components": {
    "orchestrator": {"status": "healthy", "metrics": {...}},
    "queueManager": {"status": "healthy", "metrics": {...}},
    "stateManager": {"status": "healthy", "metrics": {...}}
  }
}
```

🎮 EVIDENCE CANVAS INTEGRATION
═══════════════════════════════════════════════════════════════════════════════

The EvidenceCanvas.svelte component now includes:

✅ Unified Processing Button: "🚀 UNIFIED AI"
✅ Real-time Job Monitoring with Visual Indicators
✅ Automatic Evidence Analysis Pipeline
✅ Detective Analysis Integration
✅ Canvas Visualization of Processing Results

Key Functions Added:
- processEvidenceWithUnifiedService()
- monitorUnifiedProcessingJobs()
- triggerUnifiedProcessing()
- addProcessingResultsToCanvas()

🔄 PROCESSING PIPELINES
═══════════════════════════════════════════════════════════════════════════════

STANDARD LEGAL DOCUMENT PIPELINE:
document-analysis → entity-extraction → legal-classification

EVIDENCE CANVAS PIPELINE:
evidence-analysis → entity-extraction → relationship-mapping → 
pattern-detection → forensic-timeline

CONTRACT ANALYSIS PIPELINE:
contract-analysis → risk-assessment → compliance-check → 
legal-classification

COMPREHENSIVE ANALYSIS PIPELINE:
document-analysis → entity-extraction → relationship-mapping → 
pattern-detection → risk-assessment → compliance-check → 
sentiment-analysis → legal-classification

🔍 JOB TYPES & PROCESSORS
═══════════════════════════════════════════════════════════════════════════════

1.  document-analysis      - Extract text, structure, metadata
2.  legal-classification   - Categorize legal document types
3.  entity-extraction      - Identify people, organizations, dates
4.  contract-analysis      - Analyze contract terms and clauses
5.  evidence-analysis      - Process evidence with detective methods
6.  relationship-mapping   - Map entity relationships and connections
7.  pattern-detection      - Detect patterns and anomalies
8.  forensic-timeline      - Create chronological event timelines
9.  risk-assessment        - Assess legal and compliance risks
10. compliance-check       - Verify regulatory compliance
11. sentiment-analysis     - Analyze document sentiment and tone
12. cuda-acceleration      - GPU-accelerated processing
13. vector-embedding       - Generate document embeddings
14. search-indexing        - Index documents for search
15. notification-dispatch  - Send processing notifications

🚦 QUEUE CONFIGURATION
═══════════════════════════════════════════════════════════════════════════════

MAIN QUEUES:
- legal.docs.process      - Document processing queue
- legal.chunks.embed      - Embedding generation
- legal.chunks.store      - Vector storage
- legal.evidence.analyze  - Evidence analysis
- legal.entities.extract  - Entity extraction
- legal.relationships.map - Relationship mapping
- legal.patterns.detect   - Pattern detection
- legal.timeline.forensic - Timeline creation
- legal.dlq              - Dead letter queue

EXCHANGES:
- legal.main (direct)     - Main exchange for routing
- legal.dlx (direct)      - Dead letter exchange

ROUTING KEYS:
- document.*             - Document processing routes
- evidence.*             - Evidence processing routes  
- analysis.*             - Analysis operation routes
- notification.*         - Notification routes

⚙️ SYSTEM STARTUP
═══════════════════════════════════════════════════════════════════════════════

1. Run Unified Services:
```bash
cd sveltekit-frontend
npm run dev:full
```

2. Individual Components:
```bash
npm run dev           # SvelteKit only
npm start            # Standard startup
```

3. Service Health Checks:
- RabbitMQ: http://localhost:15672 (guest/guest)
- System Health: http://localhost:5177/api/legal/health
- RabbitMQ Health: http://localhost:5177/api/rabbitmq/health

📊 MONITORING & METRICS
═══════════════════════════════════════════════════════════════════════════════

ORCHESTRATOR METRICS:
- Active jobs count
- Queued jobs count  
- Completed jobs (daily)
- Average processing time
- Success rate percentage

QUEUE MANAGER METRICS:
- Attached queues count
- Optimization score (0-100)
- Auto-scaling status
- Queue utilization rates

STATE MANAGER METRICS:
- Active subscriptions
- State conflicts count
- Synchronization latency
- Distributed lock status

🛠️ CONFIGURATION
═══════════════════════════════════════════════════════════════════════════════

Environment Variables:
```bash
RABBITMQ_URL=amqp://localhost:5672
RABBITMQ_MANAGEMENT_URL=http://localhost:15672
```

Queue Configuration:
- Message TTL: 1 hour (3600000ms)
- Max Priority: 5
- Auto-delete: false
- Durable: true

Auto-scaling Thresholds:
- Scale up: >80% utilization
- Scale down: <20% utilization
- Min workers: 1
- Max workers: 10

🔧 TROUBLESHOOTING
═══════════════════════════════════════════════════════════════════════────────

COMMON ISSUES:

1. Queue Configuration Conflicts:
   Error: "PRECONDITION_FAILED - inequivalent arg 'x-message-ttl'"
   Solution: Delete existing queues or restart RabbitMQ

2. Connection Issues:
   Error: "ECONNREFUSED"
   Solution: Ensure RabbitMQ service is running

3. Memory Issues:
   Error: High memory usage
   Solution: Implement message acknowledgments and limit queue sizes

4. Processing Delays:
   Issue: Slow job processing
   Solution: Check auto-scaling configuration and worker counts

📈 PERFORMANCE OPTIMIZATION
═══════════════════════════════════════════════════════════════════════════════

RECOMMENDED SETTINGS:

1. Production Queue Settings:
   - Prefetch count: 10
   - Acknowledgment mode: Manual
   - Message persistence: true

2. Scaling Configuration:
   - Monitor queue depth
   - Auto-scale based on CPU/memory
   - Use priority queues for urgent jobs

3. Memory Management:
   - Implement message TTL
   - Configure dead letter queues
   - Monitor memory usage

🔮 FUTURE ENHANCEMENTS
═══════════════════════════════════════════════════════════════════════────────

PLANNED FEATURES:
✅ WebSocket integration for real-time updates
✅ Advanced ML-based queue optimization
✅ Multi-tenant queue isolation
✅ Enhanced monitoring dashboard
✅ Kubernetes deployment support
✅ Message encryption and security
✅ Advanced retry strategies
✅ Performance analytics

═══════════════════════════════════════════════════════════════════════════════
                              END OF GUIDE
═══════════════════════════════════════════════════════════════════════════════

This RabbitMQ integration provides a production-ready, scalable message queuing
system for legal AI operations with comprehensive monitoring, auto-scaling, and
unified orchestration capabilities.

For support or questions, refer to the API documentation and health endpoints.