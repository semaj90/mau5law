{
  "version": 3,
  "sources": ["../../node_modules/@sveltejs/kit/src/exports/internal/index.js", "../../node_modules/@sveltejs/kit/src/runtime/pathname.js", "../../node_modules/@sveltejs/kit/src/version.js", "../../node_modules/@sveltejs/kit/src/exports/index.js"],
  "sourcesContent": ["export class HttpError {\n\t/**\n\t * @param {number} status\n\t * @param {{message: string} extends App.Error ? (App.Error | string | undefined) : App.Error} body\n\t */\n\tconstructor(status, body) {\n\t\tthis.status = status;\n\t\tif (typeof body === 'string') {\n\t\t\tthis.body = { message: body };\n\t\t} else if (body) {\n\t\t\tthis.body = body;\n\t\t} else {\n\t\t\tthis.body = { message: `Error: ${status}` };\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn JSON.stringify(this.body);\n\t}\n}\n\nexport class Redirect {\n\t/**\n\t * @param {300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308} status\n\t * @param {string} location\n\t */\n\tconstructor(status, location) {\n\t\tthis.status = status;\n\t\tthis.location = location;\n\t}\n}\n\n/**\n * An error that was thrown from within the SvelteKit runtime that is not fatal and doesn't result in a 500, such as a 404.\n * `SvelteKitError` goes through `handleError`.\n * @extends Error\n */\nexport class SvelteKitError extends Error {\n\t/**\n\t * @param {number} status\n\t * @param {string} text\n\t * @param {string} message\n\t */\n\tconstructor(status, text, message) {\n\t\tsuper(message);\n\t\tthis.status = status;\n\t\tthis.text = text;\n\t}\n}\n\n/**\n * @template [T=undefined]\n */\nexport class ActionFailure {\n\t/**\n\t * @param {number} status\n\t * @param {T} data\n\t */\n\tconstructor(status, data) {\n\t\tthis.status = status;\n\t\tthis.data = data;\n\t}\n}\n\nexport { validate_remote_functions } from './remote-functions.js';\n", "const DATA_SUFFIX = '/__data.json';\nconst HTML_DATA_SUFFIX = '.html__data.json';\n\n/** @param {string} pathname */\nexport function has_data_suffix(pathname) {\n\treturn pathname.endsWith(DATA_SUFFIX) || pathname.endsWith(HTML_DATA_SUFFIX);\n}\n\n/** @param {string} pathname */\nexport function add_data_suffix(pathname) {\n\tif (pathname.endsWith('.html')) return pathname.replace(/\\.html$/, HTML_DATA_SUFFIX);\n\treturn pathname.replace(/\\/$/, '') + DATA_SUFFIX;\n}\n\n/** @param {string} pathname */\nexport function strip_data_suffix(pathname) {\n\tif (pathname.endsWith(HTML_DATA_SUFFIX)) {\n\t\treturn pathname.slice(0, -HTML_DATA_SUFFIX.length) + '.html';\n\t}\n\n\treturn pathname.slice(0, -DATA_SUFFIX.length);\n}\n\nconst ROUTE_SUFFIX = '/__route.js';\n\n/**\n * @param {string} pathname\n * @returns {boolean}\n */\nexport function has_resolution_suffix(pathname) {\n\treturn pathname.endsWith(ROUTE_SUFFIX);\n}\n\n/**\n * Convert a regular URL to a route to send to SvelteKit's server-side route resolution endpoint\n * @param {string} pathname\n * @returns {string}\n */\nexport function add_resolution_suffix(pathname) {\n\treturn pathname.replace(/\\/$/, '') + ROUTE_SUFFIX;\n}\n\n/**\n * @param {string} pathname\n * @returns {string}\n */\nexport function strip_resolution_suffix(pathname) {\n\treturn pathname.slice(0, -ROUTE_SUFFIX.length);\n}\n", "// generated during release, do not modify\n\n/** @type {string} */\nexport const VERSION = '2.27.3';\n", "import { HttpError, Redirect, ActionFailure } from './internal/index.js';\nimport { BROWSER, DEV } from 'esm-env';\nimport {\n\tadd_data_suffix,\n\tadd_resolution_suffix,\n\thas_data_suffix,\n\thas_resolution_suffix,\n\tstrip_data_suffix,\n\tstrip_resolution_suffix\n} from '../runtime/pathname.js';\n\nexport { VERSION } from '../version.js';\n\n// TODO 3.0: remove these types as they are not used anymore (we can't remove them yet because that would be a breaking change)\n/**\n * @template {number} TNumber\n * @template {any[]} [TArray=[]]\n * @typedef {TNumber extends TArray['length'] ? TArray[number] : LessThan<TNumber, [...TArray, TArray['length']]>} LessThan\n */\n\n/**\n * @template {number} TStart\n * @template {number} TEnd\n * @typedef {Exclude<TEnd | LessThan<TEnd>, LessThan<TStart>>} NumericRange\n */\n\n// Keep the status codes as `number` because restricting to certain numbers makes it unnecessarily hard to use compared to the benefits\n// (we have runtime errors already to check for invalid codes). Also see https://github.com/sveltejs/kit/issues/11780\n\n// we have to repeat the JSDoc because the display for function overloads is broken\n// see https://github.com/microsoft/TypeScript/issues/55056\n\n/**\n * Throws an error with a HTTP status code and an optional message.\n * When called during request handling, this will cause SvelteKit to\n * return an error response without invoking `handleError`.\n * Make sure you're not catching the thrown error, which would prevent SvelteKit from handling it.\n * @param {number} status The [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses). Must be in the range 400-599.\n * @param {App.Error} body An object that conforms to the App.Error type. If a string is passed, it will be used as the message property.\n * @overload\n * @param {number} status\n * @param {App.Error} body\n * @return {never}\n * @throws {HttpError} This error instructs SvelteKit to initiate HTTP error handling.\n * @throws {Error} If the provided status is invalid (not between 400 and 599).\n */\n/**\n * Throws an error with a HTTP status code and an optional message.\n * When called during request handling, this will cause SvelteKit to\n * return an error response without invoking `handleError`.\n * Make sure you're not catching the thrown error, which would prevent SvelteKit from handling it.\n * @param {number} status The [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses). Must be in the range 400-599.\n * @param {{ message: string } extends App.Error ? App.Error | string | undefined : never} [body] An object that conforms to the App.Error type. If a string is passed, it will be used as the message property.\n * @overload\n * @param {number} status\n * @param {{ message: string } extends App.Error ? App.Error | string | undefined : never} [body]\n * @return {never}\n * @throws {HttpError} This error instructs SvelteKit to initiate HTTP error handling.\n * @throws {Error} If the provided status is invalid (not between 400 and 599).\n */\n/**\n * Throws an error with a HTTP status code and an optional message.\n * When called during request handling, this will cause SvelteKit to\n * return an error response without invoking `handleError`.\n * Make sure you're not catching the thrown error, which would prevent SvelteKit from handling it.\n * @param {number} status The [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses). Must be in the range 400-599.\n * @param {{ message: string } extends App.Error ? App.Error | string | undefined : never} body An object that conforms to the App.Error type. If a string is passed, it will be used as the message property.\n * @return {never}\n * @throws {HttpError} This error instructs SvelteKit to initiate HTTP error handling.\n * @throws {Error} If the provided status is invalid (not between 400 and 599).\n */\nexport function error(status, body) {\n\tif ((!BROWSER || DEV) && (isNaN(status) || status < 400 || status > 599)) {\n\t\tthrow new Error(`HTTP error status codes must be between 400 and 599 â€” ${status} is invalid`);\n\t}\n\n\tthrow new HttpError(status, body);\n}\n\n/**\n * Checks whether this is an error thrown by {@link error}.\n * @template {number} T\n * @param {unknown} e\n * @param {T} [status] The status to filter for.\n * @return {e is (HttpError & { status: T extends undefined ? never : T })}\n */\nexport function isHttpError(e, status) {\n\tif (!(e instanceof HttpError)) return false;\n\treturn !status || e.status === status;\n}\n\n/**\n * Redirect a request. When called during request handling, SvelteKit will return a redirect response.\n * Make sure you're not catching the thrown redirect, which would prevent SvelteKit from handling it.\n *\n * Most common status codes:\n *  * `303 See Other`: redirect as a GET request (often used after a form POST request)\n *  * `307 Temporary Redirect`: redirect will keep the request method\n *  * `308 Permanent Redirect`: redirect will keep the request method, SEO will be transferred to the new page\n *\n * [See all redirect status codes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#redirection_messages)\n *\n * @param {300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308 | ({} & number)} status The [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#redirection_messages). Must be in the range 300-308.\n * @param {string | URL} location The location to redirect to.\n * @throws {Redirect} This error instructs SvelteKit to redirect to the specified location.\n * @throws {Error} If the provided status is invalid.\n * @return {never}\n */\nexport function redirect(status, location) {\n\tif ((!BROWSER || DEV) && (isNaN(status) || status < 300 || status > 308)) {\n\t\tthrow new Error('Invalid status code');\n\t}\n\n\tthrow new Redirect(\n\t\t// @ts-ignore\n\t\tstatus,\n\t\tlocation.toString()\n\t);\n}\n\n/**\n * Checks whether this is a redirect thrown by {@link redirect}.\n * @param {unknown} e The object to check.\n * @return {e is Redirect}\n */\nexport function isRedirect(e) {\n\treturn e instanceof Redirect;\n}\n\n/**\n * Create a JSON `Response` object from the supplied data.\n * @param {any} data The value that will be serialized as JSON.\n * @param {ResponseInit} [init] Options such as `status` and `headers` that will be added to the response. `Content-Type: application/json` and `Content-Length` headers will be added automatically.\n */\nexport function json(data, init) {\n\t// TODO deprecate this in favour of `Response.json` when it's\n\t// more widely supported\n\tconst body = JSON.stringify(data);\n\n\t// we can't just do `text(JSON.stringify(data), init)` because\n\t// it will set a default `content-type` header. duplicated code\n\t// means less duplicated work\n\tconst headers = new Headers(init?.headers);\n\tif (!headers.has('content-length')) {\n\t\theaders.set('content-length', encoder.encode(body).byteLength.toString());\n\t}\n\n\tif (!headers.has('content-type')) {\n\t\theaders.set('content-type', 'application/json');\n\t}\n\n\treturn new Response(body, {\n\t\t...init,\n\t\theaders\n\t});\n}\n\nconst encoder = new TextEncoder();\n\n/**\n * Create a `Response` object from the supplied body.\n * @param {string} body The value that will be used as-is.\n * @param {ResponseInit} [init] Options such as `status` and `headers` that will be added to the response. A `Content-Length` header will be added automatically.\n */\nexport function text(body, init) {\n\tconst headers = new Headers(init?.headers);\n\tif (!headers.has('content-length')) {\n\t\tconst encoded = encoder.encode(body);\n\t\theaders.set('content-length', encoded.byteLength.toString());\n\t\treturn new Response(encoded, {\n\t\t\t...init,\n\t\t\theaders\n\t\t});\n\t}\n\n\treturn new Response(body, {\n\t\t...init,\n\t\theaders\n\t});\n}\n\n/**\n * Create an `ActionFailure` object. Call when form submission fails.\n * @param {number} status The [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses). Must be in the range 400-599.\n * @overload\n * @param {number} status\n * @returns {import('./public.js').ActionFailure<undefined>}\n */\n/**\n * Create an `ActionFailure` object. Call when form submission fails.\n * @template [T=undefined]\n * @param {number} status The [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses). Must be in the range 400-599.\n * @param {T} data Data associated with the failure (e.g. validation errors)\n * @overload\n * @param {number} status\n * @param {T} data\n * @returns {import('./public.js').ActionFailure<T>}\n */\n/**\n * Create an `ActionFailure` object. Call when form submission fails.\n * @param {number} status\n * @param {any} [data]\n * @returns {import('./public.js').ActionFailure<any>}\n */\nexport function fail(status, data) {\n\t// @ts-expect-error unique symbol missing\n\treturn new ActionFailure(status, data);\n}\n\n/**\n * Checks whether this is an action failure thrown by {@link fail}.\n * @param {unknown} e The object to check.\n * @return {e is import('./public.js').ActionFailure}\n */\nexport function isActionFailure(e) {\n\treturn e instanceof ActionFailure;\n}\n\n/**\n * Strips possible SvelteKit-internal suffixes and trailing slashes from the URL pathname.\n * Returns the normalized URL as well as a method for adding the potential suffix back\n * based on a new pathname (possibly including search) or URL.\n * ```js\n * import { normalizeUrl } from '@sveltejs/kit';\n *\n * const { url, denormalize } = normalizeUrl('/blog/post/__data.json');\n * console.log(url.pathname); // /blog/post\n * console.log(denormalize('/blog/post/a')); // /blog/post/a/__data.json\n * ```\n * @param {URL | string} url\n * @returns {{ url: URL, wasNormalized: boolean, denormalize: (url?: string | URL) => URL }}\n * @since 2.18.0\n */\nexport function normalizeUrl(url) {\n\turl = new URL(url, 'http://internal');\n\n\tconst is_route_resolution = has_resolution_suffix(url.pathname);\n\tconst is_data_request = has_data_suffix(url.pathname);\n\tconst has_trailing_slash = url.pathname !== '/' && url.pathname.endsWith('/');\n\n\tif (is_route_resolution) {\n\t\turl.pathname = strip_resolution_suffix(url.pathname);\n\t} else if (is_data_request) {\n\t\turl.pathname = strip_data_suffix(url.pathname);\n\t} else if (has_trailing_slash) {\n\t\turl.pathname = url.pathname.slice(0, -1);\n\t}\n\n\treturn {\n\t\turl,\n\t\twasNormalized: is_data_request || is_route_resolution || has_trailing_slash,\n\t\tdenormalize: (new_url = url) => {\n\t\t\tnew_url = new URL(new_url, url);\n\t\t\tif (is_route_resolution) {\n\t\t\t\tnew_url.pathname = add_resolution_suffix(new_url.pathname);\n\t\t\t} else if (is_data_request) {\n\t\t\t\tnew_url.pathname = add_data_suffix(new_url.pathname);\n\t\t\t} else if (has_trailing_slash && !new_url.pathname.endsWith('/')) {\n\t\t\t\tnew_url.pathname += '/';\n\t\t\t}\n\t\t\treturn new_url;\n\t\t}\n\t};\n}\n"],
  "mappings": "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",
  "names": []
}
