name: 🚀 CI/CD Pipeline - Legal AI Platform

on:
  push:
    branches: [ main, develop, space-elephant ]
    paths-ignore:
      - '*.md'
      - '.gitignore'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8.x'

jobs:
  # Job 1: Code Quality & Linting
  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run ESLint
        run: pnpm run lint:check

      - name: 🎨 Check code formatting
        run: pnpm run format:check

      - name: 📊 Generate lint report
        if: always()
        run: |
          pnpm run lint:check --format=json --output-file=eslint-report.json || true
          echo "📊 Lint results saved to eslint-report.json"

      - name: 📤 Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: eslint-report.json

  # Job 2: TypeScript & Svelte Type Checking
  typecheck:
    name: 🔧 Type Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔧 TypeScript check
        run: pnpm run check:typescript

      - name: 🔧 Svelte check
        run: pnpm run check:svelte

      - name: 📊 Generate type check report
        if: always()
        run: |
          echo "✅ TypeScript compilation successful" > typecheck-report.txt
          pnpm run check:typescript --pretty >> typecheck-report.txt 2>&1 || true

      - name: 📤 Upload type check results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: typecheck-results
          path: typecheck-report.txt

  # Job 3: Unit Tests
  test:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run unit tests
        run: pnpm run test:unit

      - name: 📊 Generate test coverage
        run: pnpm run test:coverage

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: 📤 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage/
            test-results/

  # Job 4: Build & Security Scan
  build:
    name: 🏗️ Build & Security
    runs-on: ubuntu-latest
    needs: [lint, typecheck]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔒 Audit dependencies
        run: pnpm audit --audit-level=high

      - name: 🔍 Run security scan
        run: pnpm run security

      - name: 🏗️ Build application
        run: pnpm run build
        env:
          NODE_ENV: production

      - name: 📊 Analyze bundle size
        run: |
          echo "📊 Bundle analysis:" > bundle-analysis.txt
          du -sh .svelte-kit/output/** >> bundle-analysis.txt || true

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            .svelte-kit/output/
            bundle-analysis.txt

  # Job 5: E2E Tests (Playwright)
  e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📦 Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: 🎭 Run Playwright tests
        run: pnpm run test:e2e
        env:
          CI: true

      - name: 📤 Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/

  # Job 6: Performance & Lighthouse
  performance:
    name: ⚡ Performance Audit
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build for preview
        run: pnpm run build

      - name: 🚀 Start preview server
        run: pnpm run preview &
        env:
          PORT: 4173

      - name: ⏳ Wait for server
        run: |
          echo "Waiting for server to start..."
          timeout 30 bash -c 'until curl -s http://localhost:4173 > /dev/null; do sleep 1; done'

      - name: ⚡ Run Lighthouse audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:4173
            http://localhost:4173/demo
            http://localhost:4173/cases
          configPath: './.lighthouserc.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Job 7: Docker Build & Scan
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 8: Deployment (Production)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e, performance, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://legal-ai.yourdomain.com
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          echo "✅ Deployment successful!"
          # Add your actual deployment commands here
          # Examples:
          # - Deploy to Vercel, Netlify, or your hosting provider
          # - Update Kubernetes deployments
          # - Trigger deployment webhooks

  # Job 9: Notify on completion
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: 📢 Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📧 Email notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚨 Legal AI Pipeline Failed - ${{ github.sha }}"
          body: |
            The CI/CD pipeline failed for commit ${{ github.sha }}.
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Author: ${{ github.actor }}
            
            Check the workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: "Legal AI CI/CD <noreply@yourdomain.com>"