input {
  # Legal AI Services Logs
  redis {
    host => "legal-ai-redis"
    port => 6379
    data_type => "list"
    key => "legal-ai-logs"
    codec => json
  }
  
  # Direct JSON logs from Go services
  beats {
    port => 5044
  }
}

filter {
  # Parse legal AI service logs
  if [service] == "vector-consumer-v2" or [service] == "legal-gateway" {
    # Already JSON structured, just add metadata
    mutate {
      add_field => { "log_type" => "legal-service" }
      add_field => { "environment" => "development" }
    }
  }
  
  # Add legal document processing tags
  if [message] =~ /legal|case|evidence|document|embedding/ {
    mutate {
      add_tag => [ "legal-processing" ]
    }
  }
  
  # Parse CUDA and GPU related logs
  if [message] =~ /CUDA|GPU|RTX|vector/ {
    mutate {
      add_tag => [ "gpu-processing" ]
    }
  }
  
  # Add timestamp if missing
  if ![timestamp] {
    ruby {
      code => "event.set('timestamp', Time.now.utc.iso8601)"
    }
  }
}

output {
  # Send to Elasticsearch with legal-specific indexing
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "legal-ai-%{+YYYY.MM.dd}"
    template_name => "legal-ai"
    template => {
      "index_patterns" => ["legal-ai-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
      }
      "mappings" => {
        "properties" => {
          "service" => { "type" => "keyword" }
          "level" => { "type" => "keyword" }
          "message" => { "type" => "text" }
          "timestamp" => { "type" => "date" }
          "caller" => { "type" => "keyword" }
          "case_id" => { "type" => "integer" }
          "document_type" => { "type" => "keyword" }
          "embedding_dim" => { "type" => "integer" }
        }
      }
    }
  }
  
  # Debug output for development
  stdout {
    codec => rubydebug
  }
}