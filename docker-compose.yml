version: '3.8'

services:
  postgres:
    image: pgvector/pgvector:pg17
    container_name: legal-ai-postgres
    environment:
      - POSTGRES_DB=legal_ai_db
      - POSTGRES_USER=legal_admin
      - POSTGRES_PASSWORD=123456
      - POSTGRES_HOST_AUTH_METHOD=md5
    ports:
      - "5433:5432"  # Use 5433 to avoid conflict with existing PostgreSQL
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    networks:
      - legal-ai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U legal_admin -d legal_ai_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  minio:
    image: minio/minio:latest
    container_name: legal-ai-minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - legal-ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  redis:
    image: redis/redis-stack:latest
    container_name: legal-ai-redis
    ports:
      - "6379:6379"   # Redis port
      - "8001:8001"   # RedisInsight port
    command: >
      redis-server
      --appendonly yes
      --port 6379
      --loadmodule /opt/redis-stack/lib/redisearch.so
      --loadmodule /opt/redis-stack/lib/redistimeseries.so 
      --loadmodule /opt/redis-stack/lib/rejson.so
      --loadmodule /opt/redis-stack/lib/redisbloom.so
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    networks:
      - legal-ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - REDIS_ARGS="--appendonly yes --save 900 1"

  # RabbitMQ message broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: legal-ai-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=legal_admin
      - RABBITMQ_DEFAULT_PASS=123456
      - RABBITMQ_DEFAULT_VHOST=/
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - legal-ai-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Optional: Qdrant vector database for advanced vector operations
  qdrant:
    image: qdrant/qdrant:latest
    container_name: legal-ai-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - legal-ai-network
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  qdrant_data:
    driver: local

networks:
  legal-ai-network:
    driver: bridge