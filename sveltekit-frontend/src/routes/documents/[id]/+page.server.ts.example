// Example of proper SvelteKit form actions with Drizzle ORM
import { fail, redirect } from '@sveltejs/kit';
import { eq } from 'drizzle-orm';
import { db } from '$lib/server/db/index.js';
import { legalDocuments, notes } from '$lib/server/db/unified-schema.js';
import { documentMetadataSchema, userSettingsSchema } from '$lib/server/db/unified-schema.js';
import type { Actions, PageServerLoad } from './$types';

// Load data for the page
export const load: PageServerLoad = async ({ locals, params }) => {
  if (!locals.user) {
    throw redirect(302, '/login');
  }

  const document = await db.query.legalDocuments.findFirst({
    where: eq(legalDocuments.id, params.id),
  });

  if (!document) {
    throw error(404, 'Document not found');
  }

  if (document.userId !== locals.user.id) {
    throw error(403, 'Access denied');
  }

  return {
    document,
    user: locals.user
  };
};

// Form actions for mutations
export const actions: Actions = {
  // Update document content
  updateDocument: async ({ request, locals, params }) => {
    if (!locals.user) {
      return fail(401, { error: 'Unauthorized' });
    }

    const formData = await request.formData();
    const title = formData.get('title') as string;
    const content = formData.get('content') as string;
    const documentType = formData.get('documentType') as string;

    // Validate required fields
    if (!title || !content) {
      return fail(400, { 
        error: 'Title and content are required',
        title,
        content 
      });
    }

    try {
      // Validate metadata if provided
      let validatedMetadata = {};
      const metadataStr = formData.get('metadata') as string;
      if (metadataStr) {
        const metadataObj = JSON.parse(metadataStr);
        validatedMetadata = documentMetadataSchema.parse(metadataObj);
      }

      // Update the document
      await db.update(legalDocuments)
        .set({
          title,
          content,
          documentType: documentType || 'brief',
          metadata: validatedMetadata,
          updatedAt: new Date(),
          // Update word count
          wordCount: content.split(/\s+/).length,
          // Estimate reading time (200 words per minute)
          readingTime: Math.ceil(content.split(/\s+/).length / 200)
        })
        .where(eq(legalDocuments.id, params.id));

      return { success: true };
      
    } catch (err) {
      console.error('Failed to update document:', err);
      return fail(500, { error: 'Failed to update document' });
    }
  },

  // Add a note to the document
  addNote: async ({ request, locals, params }) => {
    if (!locals.user) {
      return fail(401, { error: 'Unauthorized' });
    }

    const formData = await request.formData();
    const noteContent = formData.get('note') as string;
    const priority = formData.get('priority') as string;

    if (!noteContent) {
      return fail(400, { error: 'Note content is required' });
    }

    try {
      // Get the document to ensure it exists and user has access
      const document = await db.query.legalDocuments.findFirst({
        where: eq(legalDocuments.id, params.id),
      });

      if (!document || document.userId !== locals.user.id) {
        return fail(403, { error: 'Access denied' });
      }

      // Create the note (ID will be auto-generated using CUID2)
      await db.insert(notes)
        .values({
          content: noteContent,
          priority: priority || 'medium',
          noteType: 'document',
          userId: locals.user.id,
          caseId: document.caseId,
          metadata: {
            relatedDocumentId: params.id,
            createdFrom: 'document-editor'
          }
        });

      return { success: true, message: 'Note added successfully' };
      
    } catch (err) {
      console.error('Failed to add note:', err);
      return fail(500, { error: 'Failed to add note' });
    }
  },

  // Auto-save functionality
  autoSave: async ({ request, locals, params }) => {
    if (!locals.user) {
      return fail(401, { error: 'Unauthorized' });
    }

    const formData = await request.formData();
    const content = formData.get('content') as string;
    const title = formData.get('title') as string;

    if (!content) {
      return fail(400, { error: 'Content is required for auto-save' });
    }

    try {
      // Update auto-save data
      await db.update(legalDocuments)
        .set({
          autoSaveData: {
            content,
            title: title || '',
            citations: [], // Would include citations from form
            autoSavedAt: new Date().toISOString(),
            isDirty: true
          },
          updatedAt: new Date()
        })
        .where(eq(legalDocuments.id, params.id));

      return { success: true };
      
    } catch (err) {
      console.error('Failed to auto-save:', err);
      return fail(500, { error: 'Auto-save failed' });
    }
  },

  // Update user settings
  updateSettings: async ({ request, locals }) => {
    if (!locals.user) {
      return fail(401, { error: 'Unauthorized' });
    }

    const formData = await request.formData();
    const settingsStr = formData.get('settings') as string;

    if (!settingsStr) {
      return fail(400, { error: 'Settings data is required' });
    }

    try {
      // Parse and validate settings
      const settingsObj = JSON.parse(settingsStr);
      const validatedSettings = userSettingsSchema.parse(settingsObj);

      // Update user settings
      await db.update(users)
        .set({
          settings: validatedSettings,
          updatedAt: new Date()
        })
        .where(eq(users.id, locals.user.id));

      return { success: true, message: 'Settings updated successfully' };
      
    } catch (err) {
      if (err instanceof z.ZodError) {
        return fail(400, { 
          error: 'Invalid settings data',
          details: err.errors
        });
      }
      
      console.error('Failed to update settings:', err);
      return fail(500, { error: 'Failed to update settings' });
    }
  }
};
