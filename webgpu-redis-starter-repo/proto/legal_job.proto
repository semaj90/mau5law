syntax = "proto3";
package webgpu;

// Import existing job definitions
import "job.proto";

// Legal-specific message types
message LegalMessage {
  string role = 1;           // user, assistant, system, agent
  string content = 2;
  string message_id = 3;
  int64 timestamp = 4;
  map<string, string> metadata = 5;
}

message LegalModelConfig {
  string model_type = 1;     // gemma3, gemma-local, autogen, crewai
  float temperature = 2;
  int32 max_tokens = 3;
  bool use_rl_optimization = 4;
  bool enable_cache = 5;
  bool enable_kv_reuse = 6;
  string compression_type = 7; // none, float16, int8, lz4
}

message LegalContext {
  string case_id = 1;
  string case_type = 2;      // contract, litigation, compliance, research
  string priority = 3;       // low, medium, high, urgent
  repeated string legal_entities = 4;
  repeated string precedent_refs = 5;
  float confidence_score = 6;
  map<string, string> case_metadata = 7;
}

message AgentConfig {
  string agent_type = 1;     // researcher, analyst, reviewer, coordinator
  string system_prompt = 2;
  repeated string tools = 3;
  map<string, string> config = 4;
}

message WorkflowConfig {
  string workflow_type = 1;  // autogen, crewai, sequential, parallel
  repeated AgentConfig agents = 2;
  int32 max_rounds = 3;
  float collaboration_threshold = 4;
}

// Enhanced job payload for legal AI
message LegalJobPayload {
  Meta meta = 1;
  string case_id = 2;
  string user_id = 3;
  repeated LegalMessage messages = 4;
  LegalModelConfig model_config = 5;
  LegalContext legal_context = 6;
  WorkflowConfig workflow_config = 7;
  bytes tensor_data = 8;
  repeated string parent_tensor_ids = 9;
  bool store_embeddings = 10;
  string cache_strategy = 11; // aggressive, conservative, rl_optimized
}

// RL-specific messages
message RLState {
  float gpu_memory_usage = 1;
  float cache_hit_rate = 2;
  float tensor_access_frequency = 3;
  float computation_complexity = 4;
  float user_priority = 5;
  float model_performance = 6;
  float time_of_day = 7;
  float case_urgency = 8;
}

message RLAction {
  string action_type = 1;    // cache_gpu, cache_redis, compress_tensor, etc.
  repeated string tensor_ids = 2;
  map<string, string> parameters = 3;
}

message RLReward {
  float performance_gain = 1;
  float memory_efficiency = 2;
  float cache_hit_improvement = 3;
  float user_satisfaction = 4;
  float energy_efficiency = 5;
  float total_reward = 6;
}

message RLExperience {
  RLState state = 1;
  RLAction action = 2;
  float reward = 3;
  RLState next_state = 4;
  bool done = 5;
  int64 timestamp = 6;
}

// Enhanced job types
enum LegalJobType {
  CONTRACT_ANALYSIS = 0;
  CASE_RESEARCH = 1;
  DOCUMENT_REVIEW = 2;
  RISK_ASSESSMENT = 3;
  MULTI_AGENT_ANALYSIS = 4;
  EMBEDDING_GENERATION = 5;
  TENSOR_OPTIMIZATION = 6;
  RL_TRAINING = 7;
}

enum CacheLocation {
  GPU = 0;
  REDIS = 1;
  MINIO = 2;
  DISK_MMAP = 3;
  INDEXEDDB = 4;
}

// Enhanced job with legal capabilities
message LegalJob {
  string job_id = 1;
  LegalJobType job_type = 2;
  LegalJobPayload payload = 3;
  JobStatus status = 4;
  string enqueue_at = 5;
  string started_at = 6;
  string finished_at = 7;
  string worker_id = 8;
  string error = 9;
  RLExperience rl_experience = 10;
  repeated string related_jobs = 11;
}

// Enhanced result with legal outputs
message LegalResult {
  string job_id = 1;
  Meta meta = 2;
  bytes result_data = 3;
  string s3_key = 4;
  string produced_at = 5;
  map<string, string> extras = 6;

  // Legal-specific fields
  string legal_analysis = 7;
  repeated string extracted_entities = 8;
  repeated string citations = 9;
  float confidence_score = 10;
  repeated string agent_chain = 11;
  map<string, bytes> embeddings = 12;
  repeated string tensor_ids = 13;
  CacheLocation cached_at = 14;
  bool rl_optimized = 15;
}

// Tensor metadata for caching
message TensorMetadata {
  string tensor_id = 1;
  repeated uint64 shape = 2;
  string dtype = 3;
  string compression_type = 4;
  CacheLocation location = 5;
  uint64 size_bytes = 6;
  int64 creation_time = 7;
  int64 last_access = 8;
  int32 access_count = 9;
  string parent_computation = 10;
  float rl_value = 11;
  int32 gpu_device_id = 12;
  uint64 mmap_offset = 13;
  uint64 mmap_length = 14;
}

// Multi-tensor cache batch
message TensorBatch {
  string batch_id = 1;
  repeated TensorMetadata tensors = 2;
  int64 created_at = 3;
  string compression_strategy = 4;
  uint64 total_size_bytes = 5;
}