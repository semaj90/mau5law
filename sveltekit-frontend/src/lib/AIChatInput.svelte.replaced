<!-- AI Chat Input Component -->
<script lang="ts">
  import { browser } from "$app/environment";
  import { createEventDispatcher, onMount } from "svelte";

  // Props
  export let placeholder = "Type your message...";
  export let disabled = false;
  export let autoFocus = false;
  export let value = "";
  export let maxLength = 2000;
  export let rows = 1;
  export let maxRows = 6;

  // Event dispatcher
  const dispatch = createEventDispatcher<{
    send: string;
    input: string;
    focus: void;
    blur: void;
  }>();

  // Elements
  let textarea: HTMLTextAreaElement;
  let isMultiline = false;

  // Auto-focus on mount
  onMount(() => {
    if (browser && autoFocus && textarea) {
      setTimeout(() => textarea.focus(), 100);
}
  });

  // Handle input changes
  function handleInput(event: Event) {
    const target = event.target as HTMLTextAreaElement;
    value = target.value;
    dispatch("input", value);
    adjustTextareaHeight();
}
  // Handle key press
  function handleKeydown(event: KeyboardEvent) {
    if (event.key === "Enter") {
      if (event.shiftKey) {
        // Shift+Enter: new line
        return;
      } else {
        // Enter: send message
        event.preventDefault();
        handleSend();
}}}
  // Send message
  function handleSend() {
    const trimmedValue = value.trim();
    if (!trimmedValue || disabled) return;

    dispatch("send", trimmedValue);
    value = "";
    resetTextareaHeight();
}
  // Auto-resize textarea
  function adjustTextareaHeight() {
    if (!textarea) return;

    // Reset height to calculate scroll height
    textarea.style.height = "auto";

    // Calculate number of lines
    const lineHeight = parseInt(getComputedStyle(textarea).lineHeight);
    const paddingHeight =
      parseInt(getComputedStyle(textarea).paddingTop) +
      parseInt(getComputedStyle(textarea).paddingBottom);

    const currentRows = Math.floor(
      (textarea.scrollHeight - paddingHeight) / lineHeight
    );
    const targetRows = Math.min(Math.max(currentRows, rows), maxRows);

    textarea.style.height = `${targetRows * lineHeight + paddingHeight}px`;
    isMultiline = targetRows > 1;
}
  // Reset textarea height
  function resetTextareaHeight() {
    if (!textarea) return;

    const lineHeight = parseInt(getComputedStyle(textarea).lineHeight);
    const paddingHeight =
      parseInt(getComputedStyle(textarea).paddingTop) +
      parseInt(getComputedStyle(textarea).paddingBottom);

    textarea.style.height = `${rows * lineHeight + paddingHeight}px`;
    isMultiline = false;
}
  // Handle focus/blur events
  function handleFocus() {
    dispatch("focus");
}
  function handleBlur() {
    dispatch("blur");
}
  // Character count
  $: characterCount = value.length;
  $: isNearLimit = characterCount > maxLength * 0.8;
  $: isAtLimit = characterCount >= maxLength;
</script>

<div class="mx-auto px-4 max-w-7xl" class:multiline={isMultiline}>
  <div class="mx-auto px-4 max-w-7xl">
    <textarea
      bind:this={textarea}
      bind:value
      {placeholder}
      {disabled}
      maxlength={maxLength}
      class="mx-auto px-4 max-w-7xl"
      class:disabled
      class:near-limit={isNearLimit}
      class:at-limit={isAtLimit}
      rows={${1"
      on:input={handleInput}
      on:keydown={handleKeydown}
      on:focus={handleFocus}
      on:blur={handleBlur}
      aria-label="Chat message input"
      spellcheck="true"
    ></textarea>

    <div class="mx-auto px-4 max-w-7xl">
      {#if characterCount > 0}
        <span
          class="mx-auto px-4 max-w-7xl"
          class:near-limit={isNearLimit}
          class:at-limit={isAtLimit}
        >
          {characterCount}/{maxLength}
        </span>
      {/if}

      <button
        type="button"
        class="mx-auto px-4 max-w-7xl"
        {disabled}
        class:has-content={value.trim().length > 0}
        on:click={() => handleSend()}
        title="Send message (Enter)"
        aria-label="Send message"
      >
        <svg
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <line x1="22" y1="2" x2="11" y2="13" />
          <polygon points="22,2 15,22 11,13 2,9" />
        </svg>
      </button>
    </div>
  </div>

  {#if isMultiline}
    <div class="mx-auto px-4 max-w-7xl">
      <span class="mx-auto px-4 max-w-7xl">
        <kbd>Shift + Enter</kbd> for new line, <kbd>Enter</kbd> to send
      </span>
    </div>
  {/if}
</div>

<style>
  .chat-input-wrapper {
    position: relative;
    width: 100%;
}
  .input-container {
    display: flex;
    align-items: flex-end;
    gap: 8px;
    padding: 12px;
    background: var(--bg-primary, #ffffff);
    border: 1px solid var(--border-color, #e2e8f0);
    border-radius: 8px;
    transition:
      border-color 0.2s ease,
      box-shadow 0.2s ease;
}
  .input-container:focus-within {
    border-color: var(--accent-color, #3b82f6);
    box-shadow: 0 0 0 3px var(--accent-shadow, rgba(59, 130, 246, 0.1));
}
  .chat-input {
    flex: 1;
    min-height: 20px;
    max-height: 120px;
    padding: 8px 0;
    background: none;
    border: none;
    outline: none;
    resize: none;
    font-family: inherit;
    font-size: 0.875rem;
    line-height: 1.5;
    color: var(--text-primary, #1e293b);
    overflow-y: auto;
    scrollbar-width: thin;
}
  .chat-input::placeholder {
    color: var(--text-placeholder, #94a3b8);
}
  .chat-input:disabled {
    color: var(--text-disabled, #94a3b8);
    cursor: not-allowed;
}
  .chat-input.near-limit {
    color: var(--text-warning, #d97706);
}
  .chat-input.at-limit {
    color: var(--text-error, #dc2626);
}
  .input-actions {
    display: flex;
    align-items: center;
    gap: 8px;
    flex-shrink: 0;
}
  .character-count {
    font-size: 0.75rem;
    color: var(--text-muted, #94a3b8);
    font-variant-numeric: tabular-nums;
}
  .character-count.near-limit {
    color: var(--text-warning, #d97706);
}
  .character-count.at-limit {
    color: var(--text-error, #dc2626);
    font-weight: 600;
}
  .send-button {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    background: var(--bg-muted, #f1f5f9);
    color: var(--text-muted, #64748b);
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
}
  .send-button:hover:not(:disabled) {
    background: var(--bg-hover, #e2e8f0);
    color: var(--text-primary, #1e293b);
}
  .send-button.has-content {
    background: var(--accent-color, #3b82f6);
    color: white;
}
  .send-button.has-content:hover:not(:disabled) {
    background: var(--accent-hover, #2563eb);
}
  .send-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}
  .input-hint {
    margin-top: 8px;
    padding: 0 12px;
}
  .hint-text {
    font-size: 0.75rem;
    color: var(--text-muted, #94a3b8);
}
  .hint-text kbd {
    font-size: 0.6875rem;
    padding: 2px 4px;
    background: var(--bg-secondary, #f8fafc);
    border: 1px solid var(--border-color, #e2e8f0);
    border-radius: 3px;
    font-family: monospace;
    color: var(--text-secondary, #64748b);
}
  /* Scrollbar styling */
  .chat-input::-webkit-scrollbar {
    width: 4px;
}
  .chat-input::-webkit-scrollbar-track {
    background: transparent;
}
  .chat-input::-webkit-scrollbar-thumb {
    background: var(--border-color, #e2e8f0);
    border-radius: 2px;
}
  .chat-input::-webkit-scrollbar-thumb:hover {
    background: var(--text-muted, #94a3b8);
}
  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .input-container {
      background: var(--bg-primary, #0f172a);
      border-color: var(--border-color, #334155);
}
    .chat-input {
      color: var(--text-primary, #f8fafc);
}
    .send-button {
      background: var(--bg-muted, #334155);
      color: var(--text-muted, #94a3b8);
}
    .send-button:hover:not(:disabled) {
      background: var(--bg-hover, #475569);
      color: var(--text-primary, #f8fafc);
}
    .hint-text kbd {
      background: var(--bg-secondary, #1e293b);
      border-color: var(--border-color, #475569);
      color: var(--text-secondary, #94a3b8);
}}
  /* Responsive design */
  @media (max-width: 768px) {
    .input-container {
      padding: 8px;
}
    .send-button {
      width: 32px;
      height: 32px;
}
    .send-button svg {
      width: 16px;
      height: 16px;
}}
</style>
