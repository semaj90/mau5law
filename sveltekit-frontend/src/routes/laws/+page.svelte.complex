<script lang="ts">
  import { page } from '$app/state';
  import { enhance } from '$app/forms';
  import * as Card from "$lib/components/ui/Card";
  import { Input } from "$lib/components/ui/input/index.js";
  import { Button } from "$lib/components/ui/button/index.js";
  import * as Select from "$lib/components/ui/select/index.js";
  import * as Dialog from "$lib/components/ui/dialog/index.js";
  import * as Tabs from "$lib/components/ui/tabs/index.js";
  import { Badge } from "$lib/components/ui/badge/index.js";
  import { Loader2, Search, BookOpen, ExternalLink, MessageSquare, FileText, Bot, Zap } from "lucide-svelte";
  import FuseLegalSearch from "$lib/components/search/FuseLegalSearch.svelte";
  import AIChatWidget from "$lib/components/ai/AIChatWidget.svelte";

  let { data } = $props();

  // Search state
  let searchQuery = $state('');
  let selectedJurisdiction = $state('all');
  let selectedCategory = $state('all');
  let isSearching = $state(false);
  let searchResults = $state([]);
  let aiSummaryDialog = $state(false);
  let selectedLaw = $state(null);
  let aiSummary = $state('');
  let isGeneratingSummary = $state(false);
  let aiChatOpen = $state(false);
  let chatContext = $state(null);
  let activeSearchTab = $state('server');

  // Filtered quick links based on selection
  let filteredQuickLinks = $derived(() => {
    if (selectedJurisdiction === 'all') return data.quickLinks;
    return data.quickLinks.filter(link =>
      link.jurisdiction === selectedJurisdiction ||
      link.jurisdiction === 'federal'
    );
  });

  async function performSearch() {
    if (!searchQuery.trim()) return;

    isSearching = true;
    try {
      const params = new URLSearchParams({
        q: searchQuery,
        jurisdiction: selectedJurisdiction,
        category: selectedCategory
      });

      const response = await fetch(`/api/laws/search?${params}`);
      const result = await response.json();

      if (result.success) {
        searchResults = result.laws || [];
      } else {
        searchResults = [];
        console.error('Search failed:', result.error);
      }
    } catch (error) {
      console.error('Search error:', error);
      searchResults = [];
    } finally {
      isSearching = false;
    }
  }

  async function performAISearch() {
    if (!searchQuery.trim()) return;

    isSearching = true;
    try {
      const response = await fetch('/api/ai/legal-search', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          query: searchQuery,
          jurisdiction: selectedJurisdiction,
          category: selectedCategory,
          useAI: true
        })
      });

      const result = await response.json();

      if (result.success) {
        searchResults = result.laws || [];
      }
    } catch (error) {
      console.error('AI search error:', error);
    } finally {
      isSearching = false;
    }
  }

  async function generateAISummary(law) {
    selectedLaw = law;
    aiSummaryDialog = true;
    isGeneratingSummary = true;
    aiSummary = '';

    try {
      const response = await fetch('/api/ai/summarize', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          text: law.fullText || law.description,
          type: 'legal_statute',
          options: { max_tokens: 500 }
        })
      });

      const result = await response.json();

      if (result.success) {
        aiSummary = result.summary;
      } else {
        aiSummary = 'Unable to generate summary. Please try again.';
      }
    } catch (error) {
      console.error('Summary generation error:', error);
      aiSummary = 'Error generating summary.';
    } finally {
      isGeneratingSummary = false;
    }
  }

  async function openAIChat(law) {
    chatContext = {
      title: law.title,
      description: law.description,
      jurisdiction: law.jurisdiction,
      code: law.code,
      fullText: law.fullText || law.description
    };
    aiChatOpen = true;
  }

  function handleFuseSearchAction(law, action) {
    if (action === 'summary') {
      generateAISummary(law);
    } else if (action === 'chat') {
      openAIChat(law);
    }
  }

  // Handle enter key in search
  function handleKeydown(event) {
    if (event.key === 'Enter') {
      performSearch();
    }
  }
</script>

<svelte:head>
  <title>Legal Resources - Laws & Regulations | YoRHa Legal AI</title>
  <meta name="description" content="Browse California and state laws with AI-powered search and summaries. Access legal codes, regulations, and statutes with intelligent assistance." />
</svelte:head>

<div class="container mx-auto py-8 space-y-8">
  <!-- Header Section -->
  <div class="text-center space-y-4">
    <h1 class="text-4xl font-bold tracking-tight">Legal Resources</h1>
    <p class="text-xl text-muted-foreground max-w-2xl mx-auto">
      Browse California and state laws with AI-powered search and summaries.
      Access legal codes, regulations, and statutes with intelligent assistance.
    </p>
  </div>

  <!-- Search Section -->
  <Card.Root>
    <Card.Header>
      <Card.Title class="flex items-center gap-2">
        <Search class="h-5 w-5" />
        Search Laws & Regulations
      </Card.Title>
      <Card.Description>
        Find specific laws, codes, regulations, and legal statutes across jurisdictions
      </Card.Description>
    </Card.Header>
    <Card.Content class="space-y-4">
      <!-- Filters -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="space-y-2">
          <label class="text-sm font-medium">Jurisdiction</label>
          <Select.Root bind:selected={selectedJurisdiction}>
            <Select.Trigger>
              <Select.Value placeholder="Select jurisdiction" />
            </Select.Trigger>
            <Select.Content>
              <Select.Item value="all">All Jurisdictions</Select.Item>
              <Select.Item value="california">California</Select.Item>
              <Select.Item value="federal">Federal</Select.Item>
              <Select.Item value="nevada">Nevada</Select.Item>
              <Select.Item value="oregon">Oregon</Select.Item>
            </Select.Content>
          </Select.Root>
        </div>

        <div class="space-y-2">
          <label class="text-sm font-medium">Category</label>
          <Select.Root bind:selected={selectedCategory}>
            <Select.Trigger>
              <Select.Value placeholder="Select category" />
            </Select.Trigger>
            <Select.Content>
              <Select.Item value="all">All Categories</Select.Item>
              <Select.Item value="civil">Civil Law</Select.Item>
              <Select.Item value="criminal">Criminal Law</Select.Item>
              <Select.Item value="corporate">Corporate Law</Select.Item>
              <Select.Item value="constitutional">Constitutional Law</Select.Item>
              <Select.Item value="administrative">Administrative Law</Select.Item>
            </Select.Content>
          </Select.Root>
        </div>
      </div>

      <!-- Search Tabs -->
      <Tabs.Root bind:value={activeSearchTab}>
        <Tabs.List class="grid w-full grid-cols-3">
          <Tabs.Trigger value="server">
            <Search class="h-4 w-4 mr-2" />
            Server Search
          </Tabs.Trigger>
          <Tabs.Trigger value="client">
            <Zap class="h-4 w-4 mr-2" />
            Instant Search
          </Tabs.Trigger>
          <Tabs.Trigger value="ai">
            <Bot class="h-4 w-4 mr-2" />
            AI Search
          </Tabs.Trigger>
        </Tabs.List>

        <Tabs.Content value="server" class="space-y-4">
          <div class="flex gap-2">
            <Input
              placeholder="Search laws, codes, regulations, statutes..."
              bind:value={searchQuery}
              onkeydown={handleKeydown}
              class="flex-1"
            />
            <Button onclick={performSearch} disabled={isSearching || !searchQuery.trim()}>
              {#if isSearching}
                <Loader2 class="h-4 w-4 animate-spin mr-2" />
              {:else}
                <Search class="h-4 w-4 mr-2" />
              {/if}
              Search
            </Button>
          </div>
          <p class="text-sm text-muted-foreground">
            Server-side search with database integration and vector search capabilities.
          </p>
        </Tabs.Content>

        <Tabs.Content value="client" class="space-y-4">
          <FuseLegalSearch
            data={data.quickLinks}
            onResultSelect={handleFuseSearchAction}
            placeholder="Instant search through quick links..."
            maxResults={6}
          />
          <p class="text-sm text-muted-foreground">
            Instant client-side search with fuzzy matching and highlighting.
          </p>
        </Tabs.Content>

        <Tabs.Content value="ai" class="space-y-4">
          <div class="flex gap-2">
            <Input
              placeholder="Describe what you're looking for in natural language..."
              bind:value={searchQuery}
              onkeydown={() => handleKeydown(event)}
              class="flex-1"
            />
            <Button onclick={performAISearch} disabled={isSearching || !searchQuery.trim()}>
              {#if isSearching}
                <Loader2 class="h-4 w-4 animate-spin mr-2" />
              {:else}
                <Bot class="h-4 w-4 mr-2" />
              {/if}
              AI Search
            </Button>
          </div>
          <p class="text-sm text-muted-foreground">
            AI-powered semantic search with natural language queries and intelligent ranking.
          </p>
        </Tabs.Content>
      </Tabs.Root>
    </Card.Content>
  </Card.Root>

  <!-- Quick Access Links -->
  <div class="space-y-4">
    <h2 class="text-2xl font-semibold flex items-center gap-2">
      <BookOpen class="h-6 w-6" />
      Quick Access
    </h2>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {#each filteredQuickLinks as link}
        <Card.Root class="hover:shadow-lg transition-all duration-200 group">
          <Card.Header>
            <Card.Title class="text-lg group-hover:text-primary transition-colors">
              {link.title}
            </Card.Title>
            <Card.Description>{link.description}</Card.Description>
            <div class="flex gap-2">
              <Badge variant="secondary">{link.jurisdiction}</Badge>
              <Badge variant="outline">{link.category}</Badge>
            </div>
          </Card.Header>
          <Card.Content>
            <div class="flex gap-2">
              <Button asChild class="flex-1">
                <a href={link.url} target="_blank" rel="noopener noreferrer">
                  <ExternalLink class="h-4 w-4 mr-2" />
                  Browse
                </a>
              </Button>
              <Button variant="outline" onclick={() => generateAISummary(link)}>
                <Bot class="h-4 w-4" />
              </Button>
            </div>
          </Card.Content>
        </Card.Root>
      {/each}
    </div>
  </div>

  <!-- Search Results -->
  {#if searchResults.length > 0}
    <div class="space-y-4">
      <h2 class="text-2xl font-semibold">
        Search Results ({searchResults.length})
      </h2>

      <div class="space-y-4">
        {#each searchResults as law}
          <Card.Root>
            <Card.Header>
              <Card.Title>
                <a href="/laws/{law.jurisdiction}/{law.code}" class="hover:underline">
                  {law.title}
                </a>
              </Card.Title>
              <Card.Description>
                {law.jurisdiction} • {law.category}
                {#if law.lastUpdated}
                  • Updated {new Date(law.lastUpdated).toLocaleDateString()}
                {/if}
              </Card.Description>
            </Card.Header>
            <Card.Content>
              <p class="mb-4 text-sm">{law.description}</p>
              <div class="flex gap-2 flex-wrap">
                <Button size="sm" onclick={() => generateAISummary(law)}>
                  <Bot class="h-4 w-4 mr-2" />
                  AI Summary
                </Button>
                <Button variant="outline" size="sm" onclick={() => openAIChat(law)}>
                  <MessageSquare class="h-4 w-4 mr-2" />
                  AI Chat
                </Button>
                {#if law.fullTextUrl}
                  <Button variant="outline" size="sm" asChild>
                    <a href={law.fullTextUrl} target="_blank" rel="noopener noreferrer">
                      <FileText class="h-4 w-4 mr-2" />
                      Full Text
                    </a>
                  </Button>
                {/if}
              </div>
            </Card.Content>
          </Card.Root>
        {/each}
      </div>
    </div>
  {:else if searchQuery && !isSearching}
    <Card.Root>
      <Card.Content class="py-8 text-center">
        <p class="text-muted-foreground">No results found for "{searchQuery}". Try adjusting your search terms or filters.</p>
      </Card.Content>
    </Card.Root>
  {/if}
</div>

<!-- AI Summary Dialog -->
<Dialog.Root bind:open={aiSummaryDialog}>
  <Dialog.Content class="max-w-2xl">
    <Dialog.Header>
      <Dialog.Title>AI Summary: {selectedLaw?.title}</Dialog.Title>
      <Dialog.Description>
        AI-generated summary of {selectedLaw?.jurisdiction} law
      </Dialog.Description>
    </Dialog.Header>

    <div class="space-y-4">
      {#if isGeneratingSummary}
        <div class="flex items-center justify-center py-8">
          <Loader2 class="h-8 w-8 animate-spin mr-2" />
          <span>Generating AI summary...</span>
        </div>
      {:else if aiSummary}
        <div class="prose prose-sm max-w-none">
          <p>{aiSummary}</p>
        </div>
      {/if}

      <div class="flex justify-end gap-2 pt-4">
        <Button variant="outline" onclick={() => aiSummaryDialog = false}>
          Close
        </Button>
        {#if selectedLaw}
          <Button onclick={() => openAIChat(selectedLaw)}>
            <MessageSquare class="h-4 w-4 mr-2" />
            Ask Questions
          </Button>
        {/if}
      </div>
    </div>
  </Dialog.Content>
</Dialog.Root>

<!-- AI Chat Widget -->
<AIChatWidget
  bind:open={aiChatOpen}
  context={chatContext}
  title="Legal AI Assistant"
  placeholder="Ask questions about this law..."
/>

<style>
  :global(.prose p) {
    @apply text-sm leading-relaxed;
  }
</style>