syntax = "proto3";

package legal_ai.streaming;

option go_package = "github.com/legal-ai/proto/streaming";

// QUIC-optimized Legal AI Streaming Service
service LegalAIStreamingService {
    // High-performance document processing stream
    rpc ProcessDocumentStream(stream DocumentStreamRequest) returns (stream DocumentStreamResponse);
    
    // Real-time legal analysis streaming
    rpc StreamLegalAnalysis(AnalysisStreamRequest) returns (stream AnalysisStreamResponse);
    
    // Bulk vector embedding generation
    rpc StreamEmbeddings(stream EmbeddingBatchRequest) returns (stream EmbeddingBatchResponse);
    
    // Live recommendation updates
    rpc StreamRecommendations(RecommendationStreamRequest) returns (stream RecommendationStreamResponse);
    
    // Multiplexed case analysis pipeline
    rpc MultiplexCaseAnalysis(stream CaseAnalysisRequest) returns (stream CaseAnalysisResponse);
}

// Streaming Request Messages
message DocumentStreamRequest {
    string stream_id = 1;
    int32 chunk_index = 2;
    bytes document_chunk = 3;
    bool is_final_chunk = 4;
    string document_type = 5;
    map<string, string> metadata = 6;
    StreamingOptions options = 7;
}

message AnalysisStreamRequest {
    string case_id = 1;
    repeated string analysis_types = 2; // ["similarity", "precedent", "risk", "entity"]
    StreamingOptions options = 3;
    map<string, string> filters = 4;
}

message EmbeddingBatchRequest {
    string batch_id = 1;
    repeated string texts = 2;
    string model = 3;
    int32 batch_size = 4;
    bool prioritize_speed = 5;
}

message RecommendationStreamRequest {
    string case_id = 1;
    repeated string updated_facts = 2;
    bool real_time_updates = 3;
    float confidence_threshold = 4;
    StreamingOptions options = 5;
}

message CaseAnalysisRequest {
    string request_id = 1;
    string case_id = 2;
    string analysis_type = 3;
    bytes analysis_data = 4;
    int32 priority = 5;
    map<string, string> context = 6;
}

// Streaming Response Messages
message DocumentStreamResponse {
    string stream_id = 1;
    int32 chunk_index = 2;
    ProcessingResult result = 3;
    StreamStatus status = 4;
    int64 processing_time_ms = 5;
    float progress_percent = 6;
}

message AnalysisStreamResponse {
    string case_id = 1;
    string analysis_type = 2;
    AnalysisResult result = 3;
    StreamStatus status = 4;
    bool is_incremental = 5;
    int64 timestamp = 6;
}

message EmbeddingBatchResponse {
    string batch_id = 1;
    repeated EmbeddingResult embeddings = 2;
    int32 completed_count = 3;
    int32 total_count = 4;
    StreamStatus status = 5;
    float tokens_per_second = 6;
}

message RecommendationStreamResponse {
    string case_id = 1;
    RecommendationUpdate update = 2;
    string update_type = 3; // "new", "modified", "removed"
    StreamStatus status = 4;
    float confidence_delta = 5;
}

message CaseAnalysisResponse {
    string request_id = 1;
    string case_id = 2;
    AnalysisResult result = 3;
    StreamStatus status = 4;
    int32 queue_position = 5;
    int64 estimated_completion_ms = 6;
}

// Streaming Data Structures
message StreamingOptions {
    int32 max_concurrent = 1;
    int32 buffer_size = 2;
    int32 timeout_ms = 3;
    bool enable_compression = 4;
    string compression_algorithm = 5; // "gzip", "lz4", "zstd"
    int32 chunk_size_kb = 6;
    bool enable_multiplexing = 7;
}

message StreamStatus {
    string status = 1; // "processing", "completed", "error", "timeout"
    float progress = 2;
    string error_message = 3;
    int32 error_code = 4;
    int64 bytes_processed = 5;
    int64 total_bytes = 6;
    QUICMetrics quic_metrics = 7;
}

message ProcessingResult {
    string document_id = 1;
    repeated ExtractedEntity entities = 2;
    repeated string key_concepts = 3;
    float confidence = 4;
    string summary = 5;
    repeated Classification classifications = 6;
}

message AnalysisResult {
    string analysis_id = 1;
    string analysis_type = 2;
    map<string, string> results = 3;
    float confidence = 4;
    repeated string insights = 5;
    int64 processing_time_ms = 6;
}

message EmbeddingResult {
    string text_id = 1;
    repeated float embedding = 2;
    int32 dimension = 3;
    float processing_time_ms = 4;
    bool success = 5;
    string error = 6;
}

message RecommendationUpdate {
    string recommendation_id = 1;
    string title = 2;
    float confidence_score = 3;
    string change_reason = 4;
    repeated string affected_factors = 5;
    map<string, string> metadata = 6;
}

message ExtractedEntity {
    string entity = 1;
    string entity_type = 2;
    float confidence = 3;
    int32 start_position = 4;
    int32 end_position = 5;
    map<string, string> attributes = 6;
}

message Classification {
    string category = 1;
    string subcategory = 2;
    float confidence = 3;
    repeated string supporting_evidence = 4;
}

message QUICMetrics {
    int64 bytes_sent = 1;
    int64 bytes_received = 2;
    float latency_ms = 3;
    int32 stream_count = 4;
    float bandwidth_mbps = 5;
    int32 packet_loss_count = 6;
    string connection_state = 7;
}