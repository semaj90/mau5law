<script lang="ts">
  import { enhance } from '$app/forms';
  import { invalidateAll } from '$app/navigation';
  import { page } from '$app/stores';
  import { onMount } from 'svelte';

  // Modern bits-ui components
  import { Button } from 'bits-ui';
  import { Card } from 'bits-ui';
  import { Badge } from 'bits-ui';
  import { Dialog } from 'bits-ui';

  // Custom components
  import ModernButton from '$lib/components/ui/button/Button.svelte';

  // Get data from page load
  export let data: any;

  // Reactive states
  let isLoading = false;
  let showQuickCaseModal = false;
  let refreshing = false;

  // Form states
  let caseTitle = '';
  let casePriority = 'medium';

  // Format time helper
  function formatTimeAgo(date: Date | string): string {
    const d = typeof date === 'string' ? new Date(date) : date;
    const now = new Date();
    const diff = now.getTime() - d.getTime();
    const minutes = Math.floor(diff / (1000 * 60));
    const hours = Math.floor(diff / (1000 * 60 * 60));

    if (minutes < 60) return `${minutes}m ago`;
    if (hours < 24) return `${hours}h ago`;
    return d.toLocaleDateString();
  }

  // Status indicator color helper
  function getStatusColor(status: string): string {
    switch (status) {
      case 'healthy': return 'bg-green-500/20 text-green-400 border-green-500/30';
      case 'degraded': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';
      case 'unhealthy': return 'bg-red-500/20 text-red-400 border-red-500/30';
      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';
    }
  }

  // Priority color helper
  function getPriorityColor(priority: string): string {
    switch (priority) {
      case 'high': return 'bg-red-500/20 text-red-400 border-red-500/30';
      case 'medium': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';
      case 'low': return 'bg-green-500/20 text-green-400 border-green-500/30';
      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';
    }
  }

  // Auto-refresh system data
  onMount(() => {
    const interval = setInterval(() => {
      invalidateAll();
    }, 30000); // Refresh every 30 seconds

    return () => clearInterval(interval);
  });
</script>

<svelte:head>
  <title>YoRHa Legal AI - Command Center</title>
  <meta name="description" content="Advanced Legal AI Platform with GPU Acceleration" />
</svelte:head>

<!-- Modern Dashboard Layout -->
<div class="space-y-golden-xl">

  <!-- Hero Section -->
  <section class="text-center space-y-golden-lg">
    <h1 class="text-4xl md:text-6xl font-bold text-nier-accent-warm uppercase tracking-wider">
      YoRHa Legal AI
    </h1>
    <p class="text-xl text-nier-text-secondary max-w-2xl mx-auto">
      Advanced Legal Intelligence Platform with GPU Acceleration and Vector Search
    </p>

    {#if data.health}
      <div class="flex items-center justify-center gap-golden-sm">
        <Badge.Root class={getStatusColor(data.health.overall.status)}>
          System {data.health.overall.status.toUpperCase()}
        </Badge.Root>
        <Badge.Root class="bg-nier-accent-cool/20 text-nier-accent-cool border-nier-accent-cool/30">
          Health Score: {data.health.overall.healthScore}%
        </Badge.Root>
      </div>
    {/if}
  </section>

  <!-- System Status Cards -->
  <section class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-golden-lg">
    <Card.Root class="bg-nier-bg-secondary border-nier-border-muted p-golden-lg">
      <Card.Content>
        <div class="text-center space-y-golden-sm">
          <div class="text-3xl font-bold text-nier-accent-warm">
            {data.dashboardStats.activeCases}
          </div>
          <div class="text-nier-text-secondary text-sm uppercase tracking-wide">
            Active Cases
          </div>
        </div>
      </Card.Content>
    </Card.Root>

    <Card.Root class="bg-nier-bg-secondary border-nier-border-muted p-golden-lg">
      <Card.Content>
        <div class="text-center space-y-golden-sm">
          <div class="text-3xl font-bold text-nier-accent-cool">
            {data.dashboardStats.evidenceItems}
          </div>
          <div class="text-nier-text-secondary text-sm uppercase tracking-wide">
            Evidence Items
          </div>
        </div>
      </Card.Content>
    </Card.Root>

    <Card.Root class="bg-nier-bg-secondary border-nier-border-muted p-golden-lg">
      <Card.Content>
        <div class="text-center space-y-golden-sm">
          <div class="text-3xl font-bold text-green-400">
            {data.dashboardStats.aiAnalyses}
          </div>
          <div class="text-nier-text-secondary text-sm uppercase tracking-wide">
            AI Analyses
          </div>
        </div>
      </Card.Content>
    </Card.Root>

    <Card.Root class="bg-nier-bg-secondary border-nier-border-muted p-golden-lg">
      <Card.Content>
        <div class="text-center space-y-golden-sm">
          <div class="text-3xl font-bold text-nier-text-primary">
            {Math.floor(data.dashboardStats.systemUptime / 3600)}h
          </div>
          <div class="text-nier-text-secondary text-sm uppercase tracking-wide">
            System Uptime
          </div>
        </div>
      </Card.Content>
    </Card.Root>
  </section>

  <!-- Main Dashboard Grid -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-golden-xl">

    <!-- Left Column: Quick Actions -->
    <div class="space-y-golden-lg">
      <Card.Root class="bg-nier-bg-secondary border-nier-border-muted">
        <Card.Header class="pb-golden-sm">
          <Card.Title class="text-nier-accent-warm uppercase tracking-wide">
            Quick Actions
          </Card.Title>
        </Card.Header>
        <Card.Content class="space-y-golden-sm">
          <ModernButton
            onclick={() => showQuickCaseModal = true}
            variant="primary"
            class="w-full bg-gradient-to-r from-nier-accent-warm to-nier-accent-cool text-nier-bg-primary"
          >
            Create New Case
          </ModernButton>

          <ModernButton
            href="/evidenceboard"
            variant="outline"
            class="w-full border-nier-accent-cool text-nier-accent-cool hover:bg-nier-accent-cool hover:text-nier-bg-primary"
          >
            Evidence Board
          </ModernButton>

          <ModernButton
            href="/demo/enhanced-rag-semantic"
            variant="ghost"
            class="w-full text-nier-text-secondary hover:text-nier-accent-warm hover:bg-nier-bg-tertiary"
          >
            Enhanced RAG Demo
          </ModernButton>
        </Card.Content>
      </Card.Root>

      <!-- System Info Card -->
      {#if data.systemInfo}
        <Card.Root class="bg-nier-bg-secondary border-nier-border-muted">
          <Card.Header class="pb-golden-sm">
            <Card.Title class="text-nier-accent-cool uppercase tracking-wide">
              System Info
            </Card.Title>
          </Card.Header>
          <Card.Content class="space-y-golden-xs text-sm font-mono">
            <div class="grid grid-cols-2 gap-2">
              <span class="text-nier-text-secondary">Platform:</span>
              <span class="text-nier-text-primary">{data.systemInfo.platform}</span>

              <span class="text-nier-text-secondary">CPUs:</span>
              <span class="text-nier-text-primary">{data.systemInfo.cpus}</span>

              <span class="text-nier-text-secondary">GPU:</span>
              <span class="text-green-400">{data.systemInfo.gpuInfo}</span>

              <span class="text-nier-text-secondary">Memory:</span>
              <span class="text-nier-text-primary">{data.systemInfo.memoryUsage}</span>
            </div>
          </Card.Content>
        </Card.Root>
      {/if}
    </div>

    <!-- Middle Column: Recent Activities -->
    <div class="space-y-golden-lg">
      <Card.Root class="bg-nier-bg-secondary border-nier-border-muted">
        <Card.Header class="pb-golden-sm">
          <Card.Title class="text-nier-text-primary uppercase tracking-wide">
            Recent Activities
          </Card.Title>
        </Card.Header>
        <Card.Content class="space-y-golden-sm">
          {#each data.recentActivities as activity}
            <div class="border-l-2 border-nier-border-muted pl-golden-sm py-golden-xs">
              <div class="flex items-center justify-between mb-1">
                <span class="text-sm font-medium text-nier-text-primary">
                  {activity.title}
                </span>
                <Badge.Root class={getPriorityColor(activity.priority) + ' text-xs'}>
                  {activity.priority}
                </Badge.Root>
              </div>
              <div class="text-xs text-nier-text-secondary font-mono">
                {formatTimeAgo(activity.timestamp)}
              </div>
            </div>
          {/each}
        </Card.Content>
      </Card.Root>
    </div>

    <!-- Right Column: System Services -->
    <div class="space-y-golden-lg">
      {#if data.health}
        <Card.Root class="bg-nier-bg-secondary border-nier-border-muted">
          <Card.Header class="pb-golden-sm flex flex-row items-center justify-between">
            <Card.Title class="text-nier-text-primary uppercase tracking-wide">
              Services Status
            </Card.Title>
            <form method="POST" action="?/refreshSystem" use:enhance={() => {
              refreshing = true;
              return async ({ result }) => {
                refreshing = false;
                if (result.type === 'success') {
                  await invalidateAll();
                }
              };
            }}>
              <ModernButton
                type="submit"
                variant="ghost"
                size="sm"
                loading={refreshing}
                class="text-nier-text-secondary hover:text-nier-accent-cool"
              >
                Refresh
              </ModernButton>
            </form>
          </Card.Header>
          <Card.Content class="space-y-golden-sm">

            <!-- Database Services -->
            <div class="space-y-golden-xs">
              <h4 class="text-xs text-nier-text-secondary uppercase tracking-wide font-bold">
                Databases
              </h4>
              {#each Object.entries(data.health.services.databases) as [name, service]}
                <div class="flex items-center justify-between text-sm">
                  <span class="text-nier-text-primary capitalize">{name}</span>
                  <Badge.Root class={getStatusColor(service.status) + ' text-xs'}>
                    {service.status}
                  </Badge.Root>
                </div>
              {/each}
            </div>

            <!-- AI Services -->
            <div class="space-y-golden-xs">
              <h4 class="text-xs text-nier-text-secondary uppercase tracking-wide font-bold">
                AI Services
              </h4>
              {#each Object.entries(data.health.services.aiServices) as [name, service]}
                <div class="flex items-center justify-between text-sm">
                  <span class="text-nier-text-primary capitalize">{name}</span>
                  <Badge.Root class={getStatusColor(service.status) + ' text-xs'}>
                    {service.status}
                  </Badge.Root>
                </div>
              {/each}
            </div>

            <!-- GPU Services -->
            <div class="space-y-golden-xs">
              <h4 class="text-xs text-nier-text-secondary uppercase tracking-wide font-bold">
                GPU Services
              </h4>
              {#each Object.entries(data.health.services.gpuServices) as [name, service]}
                <div class="flex items-center justify-between text-sm">
                  <span class="text-nier-text-primary capitalize">{name}</span>
                  <Badge.Root class={getStatusColor(service.status) + ' text-xs'}>
                    {service.status}
                  </Badge.Root>
                </div>
              {/each}
            </div>

          </Card.Content>
        </Card.Root>
      {/if}
    </div>

  </div>

</div>

<!-- Quick Case Creation Modal -->
{#if showQuickCaseModal}
  <Dialog.Root open={showQuickCaseModal} onOpenChange={() => showQuickCaseModal = false}>
    <Dialog.Portal>
      <Dialog.Overlay class="fixed inset-0 bg-black/60 backdrop-blur-sm z-50" />
      <Dialog.Content class="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-51 bg-nier-bg-secondary border border-nier-border-primary rounded-lg p-golden-xl max-w-lg w-[calc(100vw-2rem)]">
        <Dialog.Header class="mb-golden-lg">
          <Dialog.Title class="text-xl font-bold text-nier-accent-warm uppercase tracking-wide">
            Create New Case
          </Dialog.Title>
          <Dialog.Description class="text-nier-text-secondary text-sm mt-golden-xs">
            Quickly create a new case for investigation
          </Dialog.Description>
        </Dialog.Header>

        <form
          method="POST"
          action="?/createQuickCase"
          use:enhance={() => {
            isLoading = true;
            return async ({ result }) => {
              isLoading = false;
              if (result.type === 'success') {
                showQuickCaseModal = false;
                caseTitle = '';
                casePriority = 'medium';
                await invalidateAll();
              }
            };
          }}
          class="space-y-golden-lg"
        >
          <div class="space-y-golden-sm">
            <label for="title" class="block text-sm font-medium text-nier-text-primary uppercase tracking-wide">
              Case Title
            </label>
            <input
              type="text"
              name="title"
              id="title"
              bind:value={caseTitle}
              required
              class="w-full bg-nier-bg-tertiary border border-nier-border-muted rounded px-golden-sm py-golden-xs text-nier-text-primary focus:border-nier-accent-warm focus:outline-none transition-colors"
              placeholder="Enter case title..."
            />
          </div>

          <div class="space-y-golden-sm">
            <label for="priority" class="block text-sm font-medium text-nier-text-primary uppercase tracking-wide">
              Priority Level
            </label>
            <select
              name="priority"
              id="priority"
              bind:value={casePriority}
              class="w-full bg-nier-bg-tertiary border border-nier-border-muted rounded px-golden-sm py-golden-xs text-nier-text-primary focus:border-nier-accent-warm focus:outline-none transition-colors"
            >
              <option value="low">Low Priority</option>
              <option value="medium">Medium Priority</option>
              <option value="high">High Priority</option>
            </select>
          </div>

          <div class="flex justify-end gap-golden-sm">
            <ModernButton
              type="button"
              variant="ghost"
              onclick={() => showQuickCaseModal = false}
              class="text-nier-text-secondary hover:text-nier-text-primary"
            >
              Cancel
            </ModernButton>
            <ModernButton
              type="submit"
              variant="primary"
              loading={isLoading}
              class="bg-gradient-to-r from-nier-accent-warm to-nier-accent-cool text-nier-bg-primary"
            >
              Create Case
            </ModernButton>
          </div>
        </form>

      </Dialog.Content>
    </Dialog.Portal>
  </Dialog.Root>
{/if}

<style>
  /* Custom scrollbar for YoRHa theme */
  :global(*::-webkit-scrollbar) {
    width: 8px;
    height: 8px;
  }

  :global(*::-webkit-scrollbar-track) {
    background: var(--color-nier-bg-tertiary);
  }

  :global(*::-webkit-scrollbar-thumb) {
    background: var(--color-nier-border-muted);
    border-radius: 4px;
  }

  :global(*::-webkit-scrollbar-thumb:hover) {
    background: var(--color-nier-accent-warm);
  }
</style>