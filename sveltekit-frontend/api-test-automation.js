// API Testing Automation with Playwright
// Demonstrates automated testing of working API endpoints
import { chromium } from 'playwright';
import fs from 'fs';

async function testAPIEndpoints() {
  console.log('🚀 Starting API endpoint automation testing...');
  
  let browser;
  try {
    // Launch browser
    browser = await chromium.launch({ 
      headless: false,
      slowMo: 1000 
    });
    
    const page = await browser.newPage();
    
    // Test API endpoints that are working
    const apiTests = [
      {
        name: 'Database Health Check',
        url: 'http://localhost:5178/api/database/health',
        expectedStatus: 200
      }
    ];
    
    const results = {};
    
    for (const test of apiTests) {
      console.log(`🧪 Testing: ${test.name}`);
      console.log(`📡 URL: ${test.url}`);
      
      try {
        // Navigate to API endpoint
        const response = await page.goto(test.url, { 
          waitUntil: 'networkidle',
          timeout: 15000 
        });
        
        const status = response.status();
        const responseText = await response.text();
        
        console.log(`📊 Status: ${status}`);
        console.log(`📄 Response preview: ${responseText.substring(0, 200)}...`);
        
        // Parse JSON if possible
        let jsonResponse = null;
        try {
          jsonResponse = JSON.parse(responseText);
          console.log(`✅ Valid JSON response received`);
        } catch (e) {
          console.log(`⚠️ Response is not JSON`);
        }
        
        results[test.name] = {
          status: status,
          success: status === test.expectedStatus,
          hasJson: !!jsonResponse,
          responsePreview: responseText.substring(0, 200)
        };
        
        if (status === test.expectedStatus) {
          console.log(`✅ ${test.name} - PASSED`);
        } else {
          console.log(`❌ ${test.name} - FAILED (expected ${test.expectedStatus}, got ${status})`);
        }
        
      } catch (error) {
        console.log(`❌ ${test.name} - ERROR: ${error.message}`);
        results[test.name] = {
          status: 'error',
          success: false,
          error: error.message
        };
      }
      
      console.log(''); // Empty line for readability
    }
    
    // Create a simple HTML page showing API test results
    const htmlContent = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API Test Results</title>
    <style>
        body { font-family: monospace; max-width: 800px; margin: 20px auto; padding: 20px; }
        .test-result { border: 1px solid #ddd; margin: 10px 0; padding: 15px; border-radius: 5px; }
        .passed { background-color: #d4edda; border-color: #c3e6cb; }
        .failed { background-color: #f8d7da; border-color: #f5c6cb; }
        .error { background-color: #fff3cd; border-color: #ffeaa7; }
        pre { background: #f8f9fa; padding: 10px; border-radius: 3px; overflow-x: auto; }
    </style>
</head>
<body>
    <h1>🧪 API Automation Test Results</h1>
    <p><strong>Timestamp:</strong> ${new Date().toISOString()}</p>
    <p><strong>Total Tests:</strong> ${Object.keys(results).length}</p>
    
    ${Object.entries(results).map(([name, result]) => `
    <div class="test-result ${result.success ? 'passed' : result.status === 'error' ? 'error' : 'failed'}">
        <h3>${result.success ? '✅' : '❌'} ${name}</h3>
        <p><strong>Status:</strong> ${result.status}</p>
        <p><strong>Success:</strong> ${result.success}</p>
        ${result.hasJson ? '<p><strong>JSON Valid:</strong> ✅</p>' : ''}
        ${result.error ? `<p><strong>Error:</strong> ${result.error}</p>` : ''}
        ${result.responsePreview ? `<pre>Response Preview:\\n${result.responsePreview}</pre>` : ''}
    </div>
    `).join('')}
    
    <footer>
        <p>Generated by Playwright API Testing Automation</p>
    </footer>
</body>
</html>`;
    
    // Create and navigate to results page
    console.log('📝 Creating test results page...');
    await page.setContent(htmlContent);
    
    // Take screenshot of results
    await page.screenshot({ 
      path: 'api-test-results-screenshot.png',
      fullPage: true 
    });
    console.log('📸 Screenshot saved as api-test-results-screenshot.png');
    
    // Wait to allow user to see results
    console.log('⏱️ Displaying results for 10 seconds...');
    await page.waitForTimeout(10000);
    
    // Generate summary report
    const summary = {
      totalTests: Object.keys(results).length,
      passedTests: Object.values(results).filter(r => r.success).length,
      failedTests: Object.values(results).filter(r => !r.success).length,
      timestamp: new Date().toISOString(),
      testResults: results
    };
    
    console.log('\\n📊 AUTOMATION TEST SUMMARY');
    console.log('===========================');
    console.log(`Total Tests: ${summary.totalTests}`);
    console.log(`✅ Passed: ${summary.passedTests}`);
    console.log(`❌ Failed: ${summary.failedTests}`);
    console.log(`📈 Success Rate: ${((summary.passedTests / summary.totalTests) * 100).toFixed(1)}%`);
    
    // Save results to file
    fs.writeFileSync('api-automation-results.json', JSON.stringify(summary, null, 2));
    console.log('\\n📄 Results saved to api-automation-results.json');
    
    console.log('\\n🎉 API automation testing completed successfully!');
    
  } catch (error) {
    console.error('💥 API automation testing failed:', error.message);
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

testAPIEndpoints();