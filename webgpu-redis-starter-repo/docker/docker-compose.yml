version: '3.8'

services:
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass redis --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=redis
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 3s
      retries: 5

  postgres:
    image: pgvector/pgvector:pg15
    environment:
      - POSTGRES_DB=tensor_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tensor_db"]
      interval: 30s
      timeout: 5s
      retries: 5

  go-microservice:
    build:
      context: ../server/go-microservice
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - REDIS_URL=redis:6379
      - REDIS_PASSWORD=redis
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - tensor_storage:/tmp/tensors
    restart: unless-stopped

  fastapi:
    build:
      context: ../server/fastapi
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=redis
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/tensor_db
      - CUDA_VISIBLE_DEVICES=0
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - model_cache:/root/.cache
      - tensor_storage:/tmp/tensors
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  sveltekit:
    build:
      context: ../sveltekit-frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    environment:
      - PUBLIC_API_URL=http://localhost:8000
      - PUBLIC_TENSOR_URL=http://localhost:8080
    depends_on:
      - go-microservice
      - fastapi
    volumes:
      - ../sveltekit-frontend:/app
      - /app/node_modules
    command: npm run dev -- --host 0.0.0.0

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ssl_certs:/etc/ssl/certs
    depends_on:
      - sveltekit
      - fastapi
      - go-microservice
    restart: unless-stopped

  # Dataset generation worker
  dataset-worker:
    build:
      context: ../server/fastapi
      dockerfile: Dockerfile.worker
    environment:
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=redis
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/tensor_db
      - WORKER_TYPE=dataset
    depends_on:
      - redis
      - postgres
    volumes:
      - ./datasets:/datasets
      - tensor_storage:/tmp/tensors
    command: python worker.py --type dataset
    deploy:
      replicas: 2

  # Embedding worker
  embedding-worker:
    build:
      context: ../server/fastapi
      dockerfile: Dockerfile.worker
    environment:
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=redis
      - WORKER_TYPE=embedding
    depends_on:
      - redis
    volumes:
      - model_cache:/root/.cache
      - tensor_storage:/tmp/tensors
    command: python worker.py --type embedding
    deploy:
      replicas: 3

  # Clustering worker
  cluster-worker:
    build:
      context: ../server/fastapi
      dockerfile: Dockerfile.worker
    environment:
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=redis
      - WORKER_TYPE=cluster
    depends_on:
      - redis
    volumes:
      - tensor_storage:/tmp/tensors
    command: python worker.py --type cluster
    deploy:
      replicas: 1

volumes:
  redis_data:
  minio_data:
  postgres_data:
  tensor_storage:
  model_cache:
  ssl_certs:

networks:
  default:
    name: tensor-network